
# Create the testrepo
if [ -z "$1" ]
     printf "Creating repo: "
    ./create-repo-testrepo.sh | jq -r '.name'
    ./add-team-to-repo.sh
     printf "Creating webhook: "
    ./create-webhook.sh  | jq -r '.id'
     printf "Creating docs/README: "
    ./create-commit-readme.sh | jq -r ".content.html_url"
     printf "Creating CODEOWNERS: "
    ./create-commit-codeowners.sh| jq -r ".content.html_url"
     printf "Creating requirements.txt: "
    ./create-commit-python-pip.sh| jq -r ".content.html_url"
    sleep 2.5
     printf "Creating new branch: "
    ./create-branch-newbranch.sh | jq -r '.url'
     printf "Creating a commit on the new branch: "
    ./create-commit-on-new-branch.sh | jq -r ".content.html_url"
     printf "Creating an issue: "
    ./create-repo-issue.sh | jq -r '.html_url'
     printf "Creating a pull request: "
    ./create-pull-request.sh | jq -r '.html_url'
    # set the branch protection rules for main
     printf "Setting branch protection rules on default branch: "
    ./set-branch-protection.sh | jq -r '.url'

     printf "Creating a release: "
    ./create-release.sh  | jq -r '.url'
     printf "Adding a .gitattributes file to new branch: "
    ./create-commit-gitattributes.sh | jq -r ".content.html_url"

then
     >&2 echo "No optional being run"
  else

    # Renderers
    ./create-commit-test-rst.sh
    ./create-commit-test-ipynb.sh
    ./create-commit-mermaid.sh
    
    # Pride labels
    ./pride-patch-labels.sh

fi
